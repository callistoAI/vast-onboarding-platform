{
  "version": 3,
  "sources": ["../../../../../../Users/henry/Desktop/vast-onboarding-platform/netlify/functions/meta-debug.js"],
  "sourceRoot": "/var/folders/p1/6gmmfs0911x4mt_33k46zlh00000gn/T/tmp-97455-qFLyz1Fubqsd",
  "sourcesContent": ["export const handler = async (event, context) => {\n  // Handle CORS\n  const headers = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Headers': 'Content-Type',\n    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS'\n  };\n\n  // Handle CORS preflight\n  if (event.httpMethod === 'OPTIONS') {\n    return {\n      statusCode: 200,\n      headers,\n      body: ''\n    };\n  }\n\n  try {\n    // Get environment variables\n    const clientId = process.env.VITE_NEXT_PUBLIC_META_APP_ID;\n    const clientSecret = process.env.META_APP_SECRET;\n    \n    const debugInfo = {\n      timestamp: new Date().toISOString(),\n      method: event.httpMethod,\n      path: event.path,\n      environment: {\n        hasClientId: !!clientId,\n        hasClientSecret: !!clientSecret,\n        clientIdValue: clientId ? clientId.substring(0, 10) + '...' : 'undefined',\n        clientSecretValue: clientSecret ? 'present (hidden)' : 'undefined'\n      },\n      allMetaEnvVars: Object.keys(process.env).filter(key => key.includes('META')),\n      test: {\n        canProceed: !!(clientId && clientSecret),\n        error: !clientId ? 'Missing META_APP_ID' : !clientSecret ? 'Missing META_APP_SECRET' : null\n      }\n    };\n\n    return {\n      statusCode: 200,\n      headers: {\n        ...headers,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(debugInfo, null, 2)\n    };\n\n  } catch (error) {\n    return {\n      statusCode: 500,\n      headers: {\n        ...headers,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        error: 'Debug function error',\n        message: error.message,\n        timestamp: new Date().toISOString()\n      }, null, 2)\n    };\n  }\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAO,IAAM,UAAU,OAAO,OAAO,YAAY;AAE/C,QAAM,UAAU;AAAA,IACd,+BAA+B;AAAA,IAC/B,gCAAgC;AAAA,IAChC,gCAAgC;AAAA,EAClC;AAGA,MAAI,MAAM,eAAe,WAAW;AAClC,WAAO;AAAA,MACL,YAAY;AAAA,MACZ;AAAA,MACA,MAAM;AAAA,IACR;AAAA,EACF;AAEA,MAAI;AAEF,UAAM,WAAW,QAAQ,IAAI;AAC7B,UAAM,eAAe,QAAQ,IAAI;AAEjC,UAAM,YAAY;AAAA,MAChB,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,MAClC,QAAQ,MAAM;AAAA,MACd,MAAM,MAAM;AAAA,MACZ,aAAa;AAAA,QACX,aAAa,CAAC,CAAC;AAAA,QACf,iBAAiB,CAAC,CAAC;AAAA,QACnB,eAAe,WAAW,SAAS,UAAU,GAAG,EAAE,IAAI,QAAQ;AAAA,QAC9D,mBAAmB,eAAe,qBAAqB;AAAA,MACzD;AAAA,MACA,gBAAgB,OAAO,KAAK,QAAQ,GAAG,EAAE,OAAO,SAAO,IAAI,SAAS,MAAM,CAAC;AAAA,MAC3E,MAAM;AAAA,QACJ,YAAY,CAAC,EAAE,YAAY;AAAA,QAC3B,OAAO,CAAC,WAAW,wBAAwB,CAAC,eAAe,4BAA4B;AAAA,MACzF;AAAA,IACF;AAEA,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,SAAS;AAAA,QACP,GAAG;AAAA,QACH,gBAAgB;AAAA,MAClB;AAAA,MACA,MAAM,KAAK,UAAU,WAAW,MAAM,CAAC;AAAA,IACzC;AAAA,EAEF,SAAS,OAAO;AACd,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,SAAS;AAAA,QACP,GAAG;AAAA,QACH,gBAAgB;AAAA,MAClB;AAAA,MACA,MAAM,KAAK,UAAU;AAAA,QACnB,OAAO;AAAA,QACP,SAAS,MAAM;AAAA,QACf,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,MACpC,GAAG,MAAM,CAAC;AAAA,IACZ;AAAA,EACF;AACF;",
  "names": []
}
